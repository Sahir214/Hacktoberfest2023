class Solution {
    public int binarySearchLeft(int target, MountainArray mountainArr , int si, int ei){
        int mid;
        while(si <= ei){
            mid = si + (ei - si)/2;
            if(mountainArr.get(mid) == target){
                return mid;
            }
            else if(mountainArr.get(mid) > target){
                ei = mid - 1;
            }
            else{
                si = mid + 1;
            }
        }
        return -1;
    }
    public int binarySearchRight(int target, MountainArray mountainArr , int si, int ei){
        int mid;
        while(si <= ei){
            mid = si + (ei - si)/2;
            if(mountainArr.get(mid) == target){
                return mid;
            }
            else if(mountainArr.get(mid) < target){
                ei = mid - 1;
            }
            else{
                si = mid + 1;
            }
        }
        return -1;
    }
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int n = mountainArr.length();
        int si = 0, ei = n -1;
        int mid ;
        while(si < ei){
            mid = si + (ei - si)/2;
            if(mountainArr.get(mid) < mountainArr.get(mid + 1)){
                si = mid + 1;
            }
            else{
                ei = mid;
            }
        }
        int left = binarySearchLeft(target, mountainArr, 0, si);
        if(left > -1){
            return left;
        }
        else{
            int right =  binarySearchRight(target, mountainArr, si+1, n - 1);
            return right;
        }
        
    }
}
